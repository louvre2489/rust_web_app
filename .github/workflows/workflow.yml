name: rust_web_app_workflow

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build_cache:
    runs-on: ubuntu-22.04

    env:
      RUSTC_FORCE_INCREMENTAL: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: ./.github/actions/cache_cargo

      - name: Build
        run: cargo build --verbose
        working-directory: .

  fmt:
    runs-on: ubuntu-22.04

    needs: build_cache

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup rustfmt
        run: rustup component add rustfmt

      - name: Restore cache
        uses: ./.github/actions/cache_cargo

      - name: Exec rustfmt
        run: cargo fmt --all -- --check
        working-directory: .

          #  clippy:
          #    runs-on: ubuntu-latest
          #
          #    env:
          #      RUSTC_FORCE_INCREMENTAL: 1
          #
          #    needs: build_cache
          #
          #    steps:
          #      - name: Checkout
          #        uses: actions/checkout@v3
          #
          #      - name: Setup rustfmt
          #        run: rustup component add clippy
          #
          #      - name: Restore cache
          #        uses: ./.github/actions/cache_cargo
          #
          #      - name: Exec clippy
          #        run: cargo clippy --all-targets --all-features -- -D warnings
          #        working-directory: .

  unit_test:
    runs-on: ubuntu-22.04

    env:
      RUSTC_FORCE_INCREMENTAL: 1

    needs: build_cache

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore cache
        uses: ./.github/actions/cache_cargo

      - name: Run tests
        run: cargo test --no-default-features
        working-directory: .

  e2e_test:
    runs-on: ubuntu-20.04

    needs: build_cache

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: baptiste0928/cargo-install@v1
        name: Install sqlx-cli
        with:
          crate: sqlx-cli

      - name: Build
        run: docker compose up -d

      - name: Create DB
        run: sqlx db create

      - name: Migrate DB
        run: sqlx migrate run

      - name: Run App
        run: cargo run &
